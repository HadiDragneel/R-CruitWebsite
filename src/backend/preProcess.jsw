const tf = require("@tensorflow/tfjs");
const use = require('@tensorflow-models/universal-sentence-encoder');

export async function tokenize() {
    use.load().then(model => {
        // Embed an array of sentences.
        const sentences = [
            "Are you good?",
            "Yes I am good"
        ];
        model.embed(sentences).then(embeddings => {
            // `embeddings` is a 2D tensor consisting of the 512-dimensional embeddings for each sentence.
            // So in this example `embeddings` has the shape [2, 512].
            embeddings.print(true /* verbose */);
            const similarityMatrix = cosine_similarity_matrix(embeddings.arraySync())
            console.log(similarityMatrix)
        });
    });
}

export function similarity(a, b) {
    console.log("A", a)
    const magnitudeA = Math.sqrt(tf.dot(a, a));
    const magnitudeB = Math.sqrt(tf.dot(b, b));
    if (magnitudeA && magnitudeB)
        return tf.dot(a, b) / (magnitudeA * magnitudeB);
    else return false
}

export function cosine_similarity_matrix(matrix) {
    let cosine_similarity_matrix = [];
    for (let i = 0; i < matrix.length; i++) {
        let row = [];
        for (let j = 0; j < i; j++) {
            row.push(cosine_similarity_matrix[j][i]);
        }
        row.push(1);
        for (let j = (i + 1); j < matrix.length; j++) {
            row.push(similarity(matrix[i], matrix[j]));
        }
        cosine_similarity_matrix.push(row);
    }
    return cosine_similarity_matrix;
}

